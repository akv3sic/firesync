@using FireSync.Components.Shared
@using FireSync.DTOs
@using FireSync.DTOs.Interventions
@using FireSync.DTOs.InterventionTypes
@using FireSync.DTOs.Users
@using FireSync.Services
@using FireSync.Services.Interfaces

@inject ISnackbar Snackbar
@inject IInterventionService InterventionService
@inject IInterventionTypeService InterventionTypeService
@inject IStaffService StaffService

<MudDialog Class="responsive-dialog-width">
    <DialogContent>
        <MudForm @ref="form" Model="@newIntervention">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Naslov" @bind-Value="newIntervention.Title" FullWidth Immediate="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Opis" @bind-Value="newIntervention.Description" FullWidth Immediate="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="Guid?" Label="Tip intervencije" @bind-Value="newIntervention.InterventionTypeId" FullWidth>
                        @if (interventionTypes != null)
                        {
                            @foreach (var type in interventionTypes)
                            {
                                <MudSelectItem T="Guid?" Value="@type.Id">
                                    @type.Name
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="DateTime?" Format="s" Label="Vrijeme početka" InputType="InputType.DateTimeLocal" @bind-Value="newIntervention.StartTime" FullWidth Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="DateTime?" Format="s" Label="Vrijeme završetka" InputType="InputType.DateTimeLocal" @bind-Value="newIntervention.EndTime" FullWidth Immediate="true" />
                </MudItem>

                <MudItem xs="12">
                    <FirefighterSelector 
                        AvailableFirefighters="allFirefighters"
                        SelectedFirefighters="selectedFirefighters"
                        SelectedFirefightersChanged="OnSelectedFirefightersChanged"
                        IsLoading="isLoadingFirefighters" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Odustani</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="Submit">Spremi</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private InterventionInputDto newIntervention = new InterventionInputDto();
    private MudForm form;
    private IEnumerable<InterventionTypeOutputDto> interventionTypes = new List<InterventionTypeOutputDto>();
    private List<UserOutputDto> allFirefighters = new List<UserOutputDto>();
    private List<UserOutputDto> selectedFirefighters = new List<UserOutputDto>();
    private bool isLoadingFirefighters = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadInterventionTypes();
        await LoadFirefighters();
    }

    private async Task LoadInterventionTypes()
    {
        try
        {
            interventionTypes = await InterventionTypeService.GetAllInterventionTypesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Došlo je do greške prilikom učitavanja tipova intervencija.", Severity.Error);
        }
    }

    private async Task LoadFirefighters()
    {
        try
        {
            isLoadingFirefighters = true;
            allFirefighters = await StaffService.GetFirefightersAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Došlo je do greške prilikom učitavanja vatrogasaca.", Severity.Error);
        }
        finally
        {
            isLoadingFirefighters = false;
        }
    }

    private void OnSelectedFirefightersChanged(List<UserOutputDto> updatedSelectedFirefighters)
    {
        selectedFirefighters = updatedSelectedFirefighters;
        newIntervention.FirefighterIds = selectedFirefighters.Select(f => f.Id).ToList();
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                await InterventionService.AddInterventionAsync(newIntervention);

                Snackbar.Add("Intervencija uspješno dodana.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                Snackbar.Add("Došlo je do greške prilikom dodavanja intervencije.", Severity.Error);
            }
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
