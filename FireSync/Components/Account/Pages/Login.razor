@page "/Account/Login"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FireSync.Components.Layout
@using FireSync.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Prijava</PageTitle>

<div class="full-height-centered light-gray-background">
    <MudText Typo="Typo.h4">Dobrodošli nazad</MudText>
    <MudText Typo="Typo.subtitle1" Class="mt-1 mb-10">Prijavite se u FireSync</MudText>

    <MudCard Class="form-card-content">
        <MudCardContent>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" IsOpen="true" Class="mb-3">
                    @errorMessage
                </MudAlert>
            }
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column mb-2">
                    <label for="email" class="form-label">E-mail adresa</label>
                    <InputText @bind-Value="Input.Email" class="form-input" autocomplete="username" aria-required="true" placeholder="ime@primjer.com" />
                    <ValidationMessage For="() => Input.Email" class="mud-error-text" />
                </div>
                <div class="d-flex flex-column mb-2">
                    <label for="password" class="form-label">Lozinka</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-input" autocomplete="current-password" aria-required="true" placeholder="lozinka" />
                    <ValidationMessage For="() => Input.Password" class="mud-error-text" />
                </div>
                <div>
                    <label class="d-flex align-center">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-checkbox" />
                        Zapamti me
                    </label>
                </div>
                <div class="mt-5">
                    <MudButton ButtonType="ButtonType.Submit" Class="mt-2 mx-auto" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Prijavi se</MudButton>
                </div>
            </EditForm>

        </MudCardContent>
    </MudCard>

    <p class="mt-3">
        <a href="Account/ForgotPassword" class="mud-primary-text">Zaboravili ste lozinku?</a>
    </p>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Korisnik je prijavljen.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Račun korisnika je zaključan.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Nevažeći podaci za prijavu.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-mail adresa je obavezna.")]
        [EmailAddress(ErrorMessage = "Unesite valjanu e-mail adresu.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Lozinka je obavezna.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Zapamti me")]
        public bool RememberMe { get; set; }
    }
}
