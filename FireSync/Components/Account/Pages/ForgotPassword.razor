@page "/Account/ForgotPassword"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FireSync.Components.Layout
@using FireSync.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ForgotPassword> Logger

<PageTitle>Resetiranje lozinke</PageTitle>

<div class="full-height-centered light-gray-background">
    <MudText Typo="Typo.h4">Resetiranje lozinke</MudText>
    <MudText Typo="Typo.subtitle1" Class="mt-1 mb-10">Unesite svoju e-mail adresu kako biste primili upute za resetiranje lozinke.</MudText>

    <MudCard Class="form-card-content">
        <MudCardContent>
            <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column mb-2">
                    <label for="email" class="form-label">E-mail adresa</label>
                    <InputText @bind-Value="Input.Email" class="form-input" autocomplete="username" aria-required="true" placeholder="ime@primjer.com" />
                    <ValidationMessage For="() => Input.Email" class="mud-error-text" />
                </div>

                <div class="mt-5">
                    <MudButton ButtonType="ButtonType.Submit" Class="mt-2 mx-auto" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Pošalji upute za resetiranje</MudButton>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>

    <p class="mt-3">
        <a href="Account/Login" class="mud-primary-text">Prijava</a>
    </p>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        try
        {
            await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        }
        catch (Exception ex)
        {
            Logger.LogError($"[{nameof(ForgotPassword)}] Greška prilikom slanja e-maila za resetiranje lozinke na {Input.Email}: {ex.Message}");
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-mail adresa je obavezna.")]
        [EmailAddress(ErrorMessage = "Unesite valjanu e-mail adresu.")]
        public string Email { get; set; } = "";
    }
}
