@page "/Account/ResetPassword"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FireSync.Components.Layout
@using FireSync.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Resetiranje lozinke</PageTitle>

<div class="full-height-centered light-gray-background">
    <MudText Typo="Typo.h4">Resetiranje lozinke</MudText>
    <MudText Typo="Typo.subtitle1" Class="mt-1 mb-10">Unesite svoju novu lozinku kako biste resetirali lozinku za svoj račun.</MudText>

    <MudCard Class="form-card-content">
        <MudCardContent>
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <input type="hidden" name="Input.Code" value="@Input.Code" />
                <div class="d-flex flex-column mb-2">
                    <label for="email" class="form-label">E-mail adresa</label>
                    <InputText @bind-Value="Input.Email" class="form-input" autocomplete="username" aria-required="true" placeholder="ime@primjer.com" />
                    <ValidationMessage For="() => Input.Email" class="mud-error-text" />
                </div>
                <div class="d-flex flex-column mb-2">
                    <label for="password" class="form-label">Lozinka</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-input" autocomplete="new-password" aria-required="true" placeholder="Unesite novu lozinku" />
                    <ValidationMessage For="() => Input.Password" class="mud-error-text" />
                </div>
                <div class="d-flex flex-column mb-2">
                    <label for="confirm-password" class="form-label">Potvrda lozinke</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-input" autocomplete="new-password" aria-required="true" placeholder="Ponovno unesite lozinku" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="mud-error-text" />
                </div>
                <div class="mt-5">
                    <MudButton ButtonType="ButtonType.Submit" Class="mt-2 mx-auto" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Resetiraj lozinku</MudButton>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Pogreška: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Ne otkrivaj da korisnik ne postoji
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "E-mail adresa je obavezna.")]
        [EmailAddress(ErrorMessage = "Unesite valjanu e-mail adresu.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Lozinka je obavezna.")]
        [StringLength(100, ErrorMessage = "Lozinka mora biti najmanje {2} i najviše {1} znakova.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Potvrda lozinke")]
        [Compare("Password", ErrorMessage = "Lozinke se ne podudaraju.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
